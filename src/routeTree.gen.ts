/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as MyBookingsImport } from './routes/my-bookings'
import { Route as LogoutImport } from './routes/logout'
import { Route as LoginImport } from './routes/login'
import { Route as HomeImport } from './routes/home'
import { Route as ErrorPageImport } from './routes/error-page'
import { Route as IndexImport } from './routes/index'
import { Route as AdminIndexImport } from './routes/admin/index'
import { Route as AdminMoviesImport } from './routes/admin/movies'

// Create/Update Routes

const MyBookingsRoute = MyBookingsImport.update({
  id: '/my-bookings',
  path: '/my-bookings',
  getParentRoute: () => rootRoute,
} as any)

const LogoutRoute = LogoutImport.update({
  id: '/logout',
  path: '/logout',
  getParentRoute: () => rootRoute,
} as any)

const LoginRoute = LoginImport.update({
  id: '/login',
  path: '/login',
  getParentRoute: () => rootRoute,
} as any)

const HomeRoute = HomeImport.update({
  id: '/home',
  path: '/home',
  getParentRoute: () => rootRoute,
} as any)

const ErrorPageRoute = ErrorPageImport.update({
  id: '/error-page',
  path: '/error-page',
  getParentRoute: () => rootRoute,
} as any)

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const AdminIndexRoute = AdminIndexImport.update({
  id: '/admin/',
  path: '/admin/',
  getParentRoute: () => rootRoute,
} as any)

const AdminMoviesRoute = AdminMoviesImport.update({
  id: '/admin/movies',
  path: '/admin/movies',
  getParentRoute: () => rootRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/error-page': {
      id: '/error-page'
      path: '/error-page'
      fullPath: '/error-page'
      preLoaderRoute: typeof ErrorPageImport
      parentRoute: typeof rootRoute
    }
    '/home': {
      id: '/home'
      path: '/home'
      fullPath: '/home'
      preLoaderRoute: typeof HomeImport
      parentRoute: typeof rootRoute
    }
    '/login': {
      id: '/login'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof LoginImport
      parentRoute: typeof rootRoute
    }
    '/logout': {
      id: '/logout'
      path: '/logout'
      fullPath: '/logout'
      preLoaderRoute: typeof LogoutImport
      parentRoute: typeof rootRoute
    }
    '/my-bookings': {
      id: '/my-bookings'
      path: '/my-bookings'
      fullPath: '/my-bookings'
      preLoaderRoute: typeof MyBookingsImport
      parentRoute: typeof rootRoute
    }
    '/admin/movies': {
      id: '/admin/movies'
      path: '/admin/movies'
      fullPath: '/admin/movies'
      preLoaderRoute: typeof AdminMoviesImport
      parentRoute: typeof rootRoute
    }
    '/admin/': {
      id: '/admin/'
      path: '/admin'
      fullPath: '/admin'
      preLoaderRoute: typeof AdminIndexImport
      parentRoute: typeof rootRoute
    }
  }
}

// Create and export the route tree

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/error-page': typeof ErrorPageRoute
  '/home': typeof HomeRoute
  '/login': typeof LoginRoute
  '/logout': typeof LogoutRoute
  '/my-bookings': typeof MyBookingsRoute
  '/admin/movies': typeof AdminMoviesRoute
  '/admin': typeof AdminIndexRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/error-page': typeof ErrorPageRoute
  '/home': typeof HomeRoute
  '/login': typeof LoginRoute
  '/logout': typeof LogoutRoute
  '/my-bookings': typeof MyBookingsRoute
  '/admin/movies': typeof AdminMoviesRoute
  '/admin': typeof AdminIndexRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/error-page': typeof ErrorPageRoute
  '/home': typeof HomeRoute
  '/login': typeof LoginRoute
  '/logout': typeof LogoutRoute
  '/my-bookings': typeof MyBookingsRoute
  '/admin/movies': typeof AdminMoviesRoute
  '/admin/': typeof AdminIndexRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/error-page'
    | '/home'
    | '/login'
    | '/logout'
    | '/my-bookings'
    | '/admin/movies'
    | '/admin'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/error-page'
    | '/home'
    | '/login'
    | '/logout'
    | '/my-bookings'
    | '/admin/movies'
    | '/admin'
  id:
    | '__root__'
    | '/'
    | '/error-page'
    | '/home'
    | '/login'
    | '/logout'
    | '/my-bookings'
    | '/admin/movies'
    | '/admin/'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  ErrorPageRoute: typeof ErrorPageRoute
  HomeRoute: typeof HomeRoute
  LoginRoute: typeof LoginRoute
  LogoutRoute: typeof LogoutRoute
  MyBookingsRoute: typeof MyBookingsRoute
  AdminMoviesRoute: typeof AdminMoviesRoute
  AdminIndexRoute: typeof AdminIndexRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  ErrorPageRoute: ErrorPageRoute,
  HomeRoute: HomeRoute,
  LoginRoute: LoginRoute,
  LogoutRoute: LogoutRoute,
  MyBookingsRoute: MyBookingsRoute,
  AdminMoviesRoute: AdminMoviesRoute,
  AdminIndexRoute: AdminIndexRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/error-page",
        "/home",
        "/login",
        "/logout",
        "/my-bookings",
        "/admin/movies",
        "/admin/"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/error-page": {
      "filePath": "error-page.tsx"
    },
    "/home": {
      "filePath": "home.tsx"
    },
    "/login": {
      "filePath": "login.tsx"
    },
    "/logout": {
      "filePath": "logout.tsx"
    },
    "/my-bookings": {
      "filePath": "my-bookings.tsx"
    },
    "/admin/movies": {
      "filePath": "admin/movies.tsx"
    },
    "/admin/": {
      "filePath": "admin/index.tsx"
    }
  }
}
ROUTE_MANIFEST_END */
